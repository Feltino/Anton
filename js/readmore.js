!function(e){function t(t,o){if(this.element=t,this.options=e.extend({},i,o),e(this.element).data("max-height",this.options.maxHeight),e(this.element).data("height-margin",this.options.heightMargin),delete this.options.maxHeight,this.options.embedCSS&&!a){var n=".readmore-js-toggle, .readmore-js-section { "+this.options.sectionCSS+" } .readmore-js-section { overflow: hidden; }";!function(e,t){var s=e.createElement("style");s.type="text/css",s.styleSheet?s.styleSheet.cssText=t:s.appendChild(e.createTextNode(t)),e.getElementsByTagName("head")[0].appendChild(s)}(document,n),a=!0}this._defaults=i,this._name=s,this.init()}var s="readmore",i={speed:100,maxHeight:200,heightMargin:16,moreLink:'<a href="#">Read More</a>',lessLink:'<a href="#">Close</a>',embedCSS:!0,sectionCSS:"display: block; width: 100%;",startOpen:!1,expandedClass:"readmore-js-expanded",collapsedClass:"readmore-js-collapsed",beforeToggle:function(){},afterToggle:function(){}},a=!1;t.prototype={init:function(){var t=this;e(this.element).each(function(){var s=e(this),i=s.css("max-height").replace(/[^-\d\.]/g,"")>s.data("max-height")?s.css("max-height").replace(/[^-\d\.]/g,""):s.data("max-height"),a=s.data("height-margin");if("none"!=s.css("max-height")&&s.css("max-height","none"),t.setBoxHeight(s),s.outerHeight(!0)<=i+a)return!0;s.addClass("readmore-js-section "+t.options.collapsedClass).data("collapsedHeight",i);var o=t.options.startOpen?t.options.lessLink:t.options.moreLink;s.after(e(o).on("click",function(e){t.toggleSlider(this,s,e)}).addClass("readmore-js-toggle")),t.options.startOpen||s.css({height:i})}),e(window).on("resize",function(e){t.resizeBoxes()})},toggleSlider:function(t,s,i){i.preventDefault();var a=this,o=newLink=sectionClass="",n=!1,h=e(s).data("collapsedHeight");e(s).height()<=h?(o=e(s).data("expandedHeight")+"px",newLink="lessLink",n=!0,sectionClass=a.options.expandedClass):(o=h,newLink="moreLink",sectionClass=a.options.collapsedClass),a.options.beforeToggle(t,s,n),e(s).animate({height:o},{duration:a.options.speed,complete:function(){a.options.afterToggle(t,s,n),e(t).replaceWith(e(a.options[newLink]).on("click",function(e){a.toggleSlider(this,s,e)}).addClass("readmore-js-toggle")),e(this).removeClass(a.options.collapsedClass+" "+a.options.expandedClass).addClass(sectionClass)}})},setBoxHeight:function(e){var t=e.clone().css({height:"auto",width:e.width(),overflow:"hidden"}).insertAfter(e),s=t.outerHeight(!0);t.remove(),e.data("expandedHeight",s)},resizeBoxes:function(){var t=this;e(".readmore-js-section").each(function(){var s=e(this);t.setBoxHeight(s),(s.height()>s.data("expandedHeight")||s.hasClass(t.options.expandedClass)&&s.height()<s.data("expandedHeight"))&&s.css("height",s.data("expandedHeight"))})},destroy:function(){var t=this;e(this.element).each(function(){var s=e(this);s.removeClass("readmore-js-section "+t.options.collapsedClass+" "+t.options.expandedClass).css({"max-height":"",height:"auto"}).next(".readmore-js-toggle").remove(),s.removeData()})}},e.fn[s]=function(i){var a=arguments;return void 0===i||"object"==typeof i?this.each(function(){if(e.data(this,"plugin_"+s)){var a=e.data(this,"plugin_"+s);a.destroy.apply(a)}e.data(this,"plugin_"+s,new t(this,i))}):"string"==typeof i&&"_"!==i[0]&&"init"!==i?this.each(function(){var o=e.data(this,"plugin_"+s);o instanceof t&&"function"==typeof o[i]&&o[i].apply(o,Array.prototype.slice.call(a,1))}):void 0}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
